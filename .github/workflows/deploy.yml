name: Deploy FastAPI App to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

# The ARN of the role created in the previous step
env:
  AWS_REGION: "ap-southeast-4"
  ECR_REPOSITORY: "serverless-fastapi-app"
  AWS_ROLE_TO_ASSUME: "${{ secrets.AWS_ROLE_TO_ASSUME }}"

permissions:
  id-token: write # Required for OIDC
  contents: read # Required to check out the code

jobs:
  build-and-push-image:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR Repository
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Set the output for the next job
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: "Terraform Plan & Apply"
    needs: build-and-push-image
    runs-on: ubuntu-latest

    # This environment is protected by a manual approval rule
    environment:
      name: production
      # url: https://my-app-url.com # Optional: set after deployment

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false # We run commands directly

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      - name: Terraform Init
        run: terraform init

      - name: Import Existing Resources
        continue-on-error: true
        run: |
          # Make import script executable and run it
          chmod +x import.sh
          echo "Running import script to handle existing resources..."
          ./import.sh
          echo "Import step completed - proceeding with terraform apply"

          # Additional cleanup for specific resource conflicts
          echo "Checking for specific resource conflicts..."

          # Try to import target group if it exists
          TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names "serverless-fastapi-app-lambda-tg" --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "None")
          if [ "$TARGET_GROUP_ARN" != "None" ] && [ -n "$TARGET_GROUP_ARN" ]; then
            echo "Found existing target group, attempting import..."
            terraform import aws_lb_target_group.lambda "$TARGET_GROUP_ARN" || echo "Target group import failed, continuing..."
          fi

          # Try to import WAF if it exists
          WAF_ID=$(aws wafv2 list-web-acls --scope REGIONAL --query 'WebACLs[?Name==`serverless-fastapi-app-waf`].Id' --output text 2>/dev/null || echo "None")
          if [ "$WAF_ID" != "None" ] && [ -n "$WAF_ID" ]; then
            echo "Found existing WAF, attempting import..."
            WAF_ARN="arn:aws:wafv2:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):regional/webacl/serverless-fastapi-app-waf/$WAF_ID"
            terraform import aws_wafv2_web_acl.main "$WAF_ARN" || echo "WAF import failed, continuing..."
          fi

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="ecr_image_uri=${{ needs.build-and-push-image.outputs.image_uri }}" \
            -var="use_existing_vpc=true" \
            -var="use_existing_dynamodb=true"
